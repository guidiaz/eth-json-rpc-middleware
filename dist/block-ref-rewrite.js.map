{"version":3,"file":"block-ref-rewrite.js","sourceRoot":"","sources":["../src/block-ref-rewrite.ts"],"names":[],"mappings":";;;AACA,qDAA2E;AAC3E,yCAA0D;AAM1D,SAAgB,+BAA+B,CAAC,EAC9C,YAAY,MACwB,EAAE;IACtC,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,KAAK,CACT,yEAAyE,CAC1E,CAAC;KACH;IAED,OAAO,uCAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;;QACrD,MAAM,aAAa,GAAuB,0BAAkB,CAAC,GAAG,CAAC,CAAC;QAClE,2CAA2C;QAC3C,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,OAAO,IAAI,EAAE,CAAC;SACf;QACD,uBAAuB;QACvB,IAAI,QAAQ,SAAuB,GAAG,CAAC,MAAM,0CAAG,aAAa,CAAC,CAAC;QAC/D,oCAAoC;QACpC,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,QAAQ,GAAG,QAAQ,CAAC;SACrB;QACD,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,OAAO,IAAI,EAAE,CAAC;SACf;QACD,mDAAmD;QACnD,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;QAC9D,IAAI,GAAG,CAAC,MAAM,EAAE;YACd,kDAAkD;YAClD,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,iBAAiB,CAAC;SAC/C;QACD,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AAhCD,0EAgCC","sourcesContent":["import { PollingBlockTracker } from 'eth-block-tracker';\r\nimport { createAsyncMiddleware, JsonRpcMiddleware } from 'json-rpc-engine';\r\nimport { blockTagParamIndex, Block } from './utils/cache';\r\n\r\ninterface BlockRefRewriteMiddlewareOptions {\r\n  blockTracker?: PollingBlockTracker;\r\n}\r\n\r\nexport function createBlockRefRewriteMiddleware({\r\n  blockTracker,\r\n}: BlockRefRewriteMiddlewareOptions = {}): JsonRpcMiddleware<string[], Block> {\r\n  if (!blockTracker) {\r\n    throw Error(\r\n      'BlockRefRewriteMiddleware - mandatory \"blockTracker\" option is missing.',\r\n    );\r\n  }\r\n\r\n  return createAsyncMiddleware(async (req, _res, next) => {\r\n    const blockRefIndex: number | undefined = blockTagParamIndex(req);\r\n    // skip if method does not include blockRef\r\n    if (blockRefIndex === undefined) {\r\n      return next();\r\n    }\r\n    // skip if not \"latest\"\r\n    let blockRef: string | undefined = req.params?.[blockRefIndex];\r\n    // omitted blockRef implies \"latest\"\r\n    if (blockRef === undefined) {\r\n      blockRef = 'latest';\r\n    }\r\n    if (blockRef !== 'latest') {\r\n      return next();\r\n    }\r\n    // rewrite blockRef to block-tracker's block number\r\n    const latestBlockNumber = await blockTracker.getLatestBlock();\r\n    if (req.params) {\r\n      // eslint-disable-next-line require-atomic-updates\r\n      req.params[blockRefIndex] = latestBlockNumber;\r\n    }\r\n    return next();\r\n  });\r\n}\r\n"]}