{"version":3,"file":"fetch.js","sourceRoot":"","sources":["../src/fetch.ts"],"names":[],"mappings":";;;AAAA,qDAA2E;AAC3E,mDAA6D;AAG7D,8EAA8E;AAC9E,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC;AACpD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;AAC5C,6EAA6E;AAE7E,MAAM,gBAAgB,GAAa;IACjC,gCAAgC;IAChC,iBAAiB;IACjB,WAAW;IACX,sCAAsC;IACtC,8BAA8B;IAC9B,+BAA+B;IAC/B,mDAAmD;IACnD,iBAAiB;CAClB,CAAC;AAuBF,SAAgB,qBAAqB,CAAC,EACpC,MAAM,EACN,mBAAmB,GACI;IACvB,OAAO,uCAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QACrD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,wBAAwB,CAAC;YACzD,GAAG;YACH,MAAM;YACN,mBAAmB;SACpB,CAAC,CAAC;QAEH,iCAAiC;QACjC,MAAM,WAAW,GAAG,CAAC,CAAC;QACtB,MAAM,aAAa,GAAG,IAAI,CAAC;QAC3B,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,WAAW,EAAE,OAAO,EAAE,EAAE;YACtD,IAAI;gBACF,MAAM,QAAQ,GAAa,MAAM,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC9D,yBAAyB;gBACzB,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAC7B,sBAAsB;gBACtB,MAAM,OAAO,GAAW,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC9C,IAAI,SAAgC,CAAC;gBACrC,IAAI;oBACF,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;iBACjC;gBAAC,OAAO,CAAC,EAAE;oBACV,MAAM,IAAI,KAAK,CACb,qDAAqD,OAAO,GAAG,CAChE,CAAC;iBACH;gBACD,MAAM,MAAM,GAAU,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACzD,iCAAiC;gBACjC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;gBACpB,OAAO;aACR;YAAC,OAAO,GAAG,EAAE;gBACZ,MAAM,MAAM,GAAW,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACtC,MAAM,WAAW,GAAY,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxF,kCAAkC;gBAClC,IAAI,CAAC,WAAW,EAAE;oBAChB,MAAM,GAAG,CAAC;iBACX;aACF;YACD,wBAAwB;YACxB,MAAM,OAAO,CAAC,aAAa,CAAC,CAAC;SAC9B;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AA7CD,sDA6CC;AAED,SAAS,kBAAkB,CAAC,QAAkB;IAC5C,mBAAmB;IACnB,QAAQ,QAAQ,CAAC,MAAM,EAAE;QACvB,KAAK,GAAG;YACN,MAAM,0BAAS,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;QAEvC,KAAK,GAAG;YACN,MAAM,oBAAoB,EAAE,CAAC;QAE/B,KAAK,GAAG,CAAC;QACT,KAAK,GAAG;YACN,MAAM,kBAAkB,EAAE,CAAC;QAE7B;YACE,MAAM;KACT;AACH,CAAC;AAED,SAAS,aAAa,CAAC,QAAkB,EAAE,IAA2B;IACpE,uBAAuB;IACvB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,0BAAS,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC3B,OAAO,EAAE,yBAAyB,QAAQ,CAAC,MAAM,GAAG;YACpD,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;KACJ;IACD,sBAAsB;IACtB,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,MAAM,0BAAS,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC3B,IAAI,EAAE,IAAI,CAAC,KAAK;SACjB,CAAC,CAAC;KACJ;IACD,2BAA2B;IAC3B,OAAO,IAAI,CAAC,MAAM,CAAC;AACrB,CAAC;AAED,SAAgB,wBAAwB,CAAC,EACvC,GAAG,EACH,MAAM,EACN,mBAAmB,GACW;IAC9B,MAAM,SAAS,GAAQ,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,QAAQ,GAAW,sBAAsB,CAAC,SAAS,CAAC,CAAC;IAE3D,kBAAkB;IAClB,0CAA0C;IAC1C,MAAM,OAAO,GAAY;QACvB,EAAE,EAAE,GAAG,CAAC,EAAE;QACV,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,MAAM,EAAE,GAAG,CAAC,MAAM;KACnB,CAAC;IAEF,0CAA0C;IAC1C,MAAM,YAAY,GAAuB,GAAG,CAAC,MAAM,CAAC;IAEpD,yBAAyB;IACzB,MAAM,iBAAiB,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAE1D,yBAAyB;IACzB,MAAM,WAAW,GAAY;QAC3B,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,iBAAiB;KACxB,CAAC;IAEF,4DAA4D;IAC5D,IAAI,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE;QAC5C,MAAM,UAAU,GAAG,GAAG,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;QACjE,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;QACrC,WAAW,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,WAAW,EAAE,CAAC;KAC5D;IAED,yCAAyC;IACzC,IAAI,mBAAmB,IAAI,YAAY,EAAE;QACvC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,YAAY,CAAC;KACzD;IAED,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;AACnC,CAAC;AA9CD,4DA8CC;AAED,SAAS,sBAAsB,CAAC,SAAc;IAC5C,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,MAAM,IAAI,SAAS,CAAC,QAAQ,CAAC;IAC7B,MAAM,IAAI,KAAK,SAAS,CAAC,QAAQ,EAAE,CAAC;IACpC,IAAI,SAAS,CAAC,IAAI,EAAE;QAClB,MAAM,IAAI,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;KAChC;IACD,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAClC,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,oBAAoB;IAC3B,OAAO,0BAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC,CAAC;AAC/E,CAAC;AAED,SAAS,kBAAkB;IACzB,IAAI,GAAG,GAAG,yDAAyD,CAAC;IACpE,GAAG,IAAI,iEAAiE,CAAC;IACzE,OAAO,0BAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;AAClD,CAAC;AAED,SAAS,OAAO,CAAC,QAAgB;IAC/B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;AACjE,CAAC","sourcesContent":["import { createAsyncMiddleware, JsonRpcMiddleware } from 'json-rpc-engine';\r\nimport { EthereumRpcError, ethErrors } from 'eth-rpc-errors';\r\nimport { Payload, Block } from './utils/cache';\r\n\r\n/* eslint-disable node/global-require,@typescript-eslint/no-require-imports */\r\nconst fetch = global.fetch || require('node-fetch');\r\nconst btoa = global.btoa || require('btoa');\r\n/* eslint-enable node/global-require,@typescript-eslint/no-require-imports */\r\n\r\nconst RETRIABLE_ERRORS: string[] = [\r\n  // ignore server overload errors\r\n  'Gateway timeout',\r\n  'ETIMEDOUT',\r\n  // ignore server sent html error pages\r\n  // or truncated json responses\r\n  'failed to parse response body',\r\n  // ignore errors where http req failed to establish\r\n  'Failed to fetch',\r\n];\r\n\r\ninterface PayloadwithOrgin extends Payload {\r\n  origin?: string;\r\n}\r\ninterface Request {\r\n  method: string;\r\n  headers: Record<string, string>;\r\n  body: string;\r\n}\r\ninterface FetchConfig {\r\n  fetchUrl: string;\r\n  fetchParams: Request;\r\n}\r\ninterface FetchMiddlewareOptions {\r\n  rpcUrl: string;\r\n  originHttpHeaderKey?: string;\r\n}\r\n\r\ninterface FetchMiddlewareFromReqOptions extends FetchMiddlewareOptions {\r\n  req: PayloadwithOrgin;\r\n}\r\n\r\nexport function createFetchMiddleware({\r\n  rpcUrl,\r\n  originHttpHeaderKey,\r\n}: FetchMiddlewareOptions): JsonRpcMiddleware<string[], Block> {\r\n  return createAsyncMiddleware(async (req, res, _next) => {\r\n    const { fetchUrl, fetchParams } = createFetchConfigFromReq({\r\n      req,\r\n      rpcUrl,\r\n      originHttpHeaderKey,\r\n    });\r\n\r\n    // attempt request multiple times\r\n    const maxAttempts = 5;\r\n    const retryInterval = 1000;\r\n    for (let attempt = 0; attempt < maxAttempts; attempt++) {\r\n      try {\r\n        const fetchRes: Response = await fetch(fetchUrl, fetchParams);\r\n        // check for http errrors\r\n        checkForHttpErrors(fetchRes);\r\n        // parse response body\r\n        const rawBody: string = await fetchRes.text();\r\n        let fetchBody: Record<string, Block>;\r\n        try {\r\n          fetchBody = JSON.parse(rawBody);\r\n        } catch (_) {\r\n          throw new Error(\r\n            `FetchMiddleware - failed to parse response body: \"${rawBody}\"`,\r\n          );\r\n        }\r\n        const result: Block = parseResponse(fetchRes, fetchBody);\r\n        // set result and exit retry loop\r\n        res.result = result;\r\n        return;\r\n      } catch (err) {\r\n        const errMsg: string = err.toString();\r\n        const isRetriable: boolean = RETRIABLE_ERRORS.some((phrase) => errMsg.includes(phrase));\r\n        // re-throw error if not retriable\r\n        if (!isRetriable) {\r\n          throw err;\r\n        }\r\n      }\r\n      // delay before retrying\r\n      await timeout(retryInterval);\r\n    }\r\n  });\r\n}\r\n\r\nfunction checkForHttpErrors(fetchRes: Response): void {\r\n  // check for errors\r\n  switch (fetchRes.status) {\r\n    case 405:\r\n      throw ethErrors.rpc.methodNotFound();\r\n\r\n    case 418:\r\n      throw createRatelimitError();\r\n\r\n    case 503:\r\n    case 504:\r\n      throw createTimeoutError();\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nfunction parseResponse(fetchRes: Response, body: Record<string, Block>): Block {\r\n  // check for error code\r\n  if (fetchRes.status !== 200) {\r\n    throw ethErrors.rpc.internal({\r\n      message: `Non-200 status code: '${fetchRes.status}'`,\r\n      data: body,\r\n    });\r\n  }\r\n  // check for rpc error\r\n  if (body.error) {\r\n    throw ethErrors.rpc.internal({\r\n      data: body.error,\r\n    });\r\n  }\r\n  // return successful result\r\n  return body.result;\r\n}\r\n\r\nexport function createFetchConfigFromReq({\r\n  req,\r\n  rpcUrl,\r\n  originHttpHeaderKey,\r\n}: FetchMiddlewareFromReqOptions): FetchConfig {\r\n  const parsedUrl: URL = new URL(rpcUrl);\r\n  const fetchUrl: string = normalizeUrlFromParsed(parsedUrl);\r\n\r\n  // prepare payload\r\n  // copy only canonical json rpc properties\r\n  const payload: Payload = {\r\n    id: req.id,\r\n    jsonrpc: req.jsonrpc,\r\n    method: req.method,\r\n    params: req.params,\r\n  };\r\n\r\n  // extract 'origin' parameter from request\r\n  const originDomain: string | undefined = req.origin;\r\n\r\n  // serialize request body\r\n  const serializedPayload: string = JSON.stringify(payload);\r\n\r\n  // configure fetch params\r\n  const fetchParams: Request = {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: serializedPayload,\r\n  };\r\n\r\n  // encoded auth details as header (not allowed in fetch url)\r\n  if (parsedUrl.username && parsedUrl.password) {\r\n    const authString = `${parsedUrl.username}:${parsedUrl.password}`;\r\n    const encodedAuth = btoa(authString);\r\n    fetchParams.headers.Authorization = `Basic ${encodedAuth}`;\r\n  }\r\n\r\n  // optional: add request origin as header\r\n  if (originHttpHeaderKey && originDomain) {\r\n    fetchParams.headers[originHttpHeaderKey] = originDomain;\r\n  }\r\n\r\n  return { fetchUrl, fetchParams };\r\n}\r\n\r\nfunction normalizeUrlFromParsed(parsedUrl: URL): string {\r\n  let result = '';\r\n  result += parsedUrl.protocol;\r\n  result += `//${parsedUrl.hostname}`;\r\n  if (parsedUrl.port) {\r\n    result += `:${parsedUrl.port}`;\r\n  }\r\n  result += `${parsedUrl.pathname}`;\r\n  return result;\r\n}\r\n\r\nfunction createRatelimitError(): EthereumRpcError<unknown> {\r\n  return ethErrors.rpc.internal({ message: `Request is being rate limited.` });\r\n}\r\n\r\nfunction createTimeoutError(): EthereumRpcError<unknown> {\r\n  let msg = `Gateway timeout. The request took too long to process. `;\r\n  msg += `This can happen when querying logs over too wide a block range.`;\r\n  return ethErrors.rpc.internal({ message: msg });\r\n}\r\n\r\nfunction timeout(duration: number): Promise<NodeJS.Timeout> {\r\n  return new Promise((resolve) => setTimeout(resolve, duration));\r\n}\r\n"]}