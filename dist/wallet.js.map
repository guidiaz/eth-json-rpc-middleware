{"version":3,"file":"wallet.js","sourceRoot":"","sources":["../src/wallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  createAsyncMiddleware,\r\n  createScaffoldMiddleware,\r\n  JsonRpcEngineNextCallback,\r\n  JsonRpcMiddleware,\r\n  JsonRpcRequest,\r\n  PendingJsonRpcResponse,\r\n} from 'json-rpc-engine';\r\nimport * as sigUtil from 'eth-sig-util';\r\nimport { ethErrors } from 'eth-rpc-errors';\r\nimport { Block } from './utils/cache';\r\n\r\ninterface TransactionParams {\r\n  from: string;\r\n}\r\n\r\ninterface MessageParams extends TransactionParams {\r\n  data: string;\r\n}\r\n\r\ninterface TypedMessageParams extends MessageParams {\r\n  version: string;\r\n}\r\n\r\ninterface WalletMiddlewareOptions {\r\n  getAccounts: (req: JsonRpcRequest<unknown>) => Promise<string[]>;\r\n  processDecryptMessage?: (\r\n    msgParams: MessageParams,\r\n    req: JsonRpcRequest<unknown>\r\n  ) => Promise<Record<string, unknown>>;\r\n  processEncryptionPublicKey?: (\r\n    address: string,\r\n    req: JsonRpcRequest<unknown>\r\n  ) => Promise<Record<string, unknown>>;\r\n  processEthSignMessage?: (\r\n    msgParams: MessageParams,\r\n    req: JsonRpcRequest<unknown>\r\n  ) => Promise<Record<string, unknown>>;\r\n  processPersonalMessage?: (\r\n    msgParams: MessageParams,\r\n    req: JsonRpcRequest<unknown>\r\n  ) => Promise<Record<string, unknown>>;\r\n  processTransaction?: (\r\n    txParams: TransactionParams,\r\n    req: JsonRpcRequest<unknown>,\r\n    next: JsonRpcEngineNextCallback\r\n  ) => Promise<Record<string, unknown>>;\r\n  processTypedMessage?: (\r\n    msgParams: MessageParams,\r\n    req: JsonRpcRequest<unknown>,\r\n    version: string\r\n  ) => Promise<Record<string, unknown>>;\r\n  processTypedMessageV3?: (\r\n    msgParams: TypedMessageParams,\r\n    req: JsonRpcRequest<unknown>,\r\n    version: string\r\n  ) => Promise<Record<string, unknown>>;\r\n  processTypedMessageV4?: (\r\n    msgParams: TypedMessageParams,\r\n    req: JsonRpcRequest<unknown>,\r\n    version: string\r\n  ) => Promise<Record<string, unknown>>;\r\n}\r\n\r\nexport function createWalletMiddleware({\r\n  getAccounts,\r\n  processDecryptMessage,\r\n  processEncryptionPublicKey,\r\n  processEthSignMessage,\r\n  processPersonalMessage,\r\n  processTransaction,\r\n  processTypedMessage,\r\n  processTypedMessageV3,\r\n  processTypedMessageV4,\r\n}: WalletMiddlewareOptions): JsonRpcMiddleware<string, Block> {\r\n  if (!getAccounts) {\r\n    throw new Error('opts.getAccounts is required');\r\n  }\r\n\r\n  return createScaffoldMiddleware({\r\n    // account lookups\r\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\r\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\r\n    // tx signatures\r\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\r\n    // message signatures\r\n    eth_sign: createAsyncMiddleware(ethSign),\r\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\r\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\r\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\r\n    personal_sign: createAsyncMiddleware(personalSign),\r\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\r\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\r\n    personal_ecRecover: createAsyncMiddleware(personalRecover),\r\n  });\r\n\r\n  //\r\n  // account lookups\r\n  //\r\n\r\n  async function lookupAccounts(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    res.result = await getAccounts(req);\r\n  }\r\n\r\n  async function lookupDefaultAccount(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    const accounts = await getAccounts(req);\r\n    res.result = accounts[0] || null;\r\n  }\r\n\r\n  //\r\n  // transaction signatures\r\n  //\r\n\r\n  async function sendTransaction(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n    next: JsonRpcEngineNextCallback\r\n  ): Promise<void> {\r\n    if (!processTransaction) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const txParams: TransactionParams =\r\n      (req.params as TransactionParams[])[0] || {};\r\n    txParams.from = await validateAndNormalizeKeyholder(\r\n      txParams.from as string,\r\n      req,\r\n    );\r\n    res.result = await processTransaction(txParams, req, next);\r\n  }\r\n\r\n  //\r\n  // message signatures\r\n  //\r\n\r\n  async function ethSign(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processEthSignMessage) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string[])[0],\r\n      req,\r\n    );\r\n    const message: string = (req.params as string[])[1];\r\n    const extraParams: Record<string, unknown> =\r\n      (req.params as Record<string, unknown>[])[2] || {};\r\n    const msgParams: MessageParams = {\r\n      ...extraParams,\r\n      from: address,\r\n      data: message,\r\n    };\r\n\r\n    res.result = await processEthSignMessage(msgParams, req);\r\n  }\r\n\r\n  async function signTypedData(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processTypedMessage) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const message: string = (req.params as string[])[0];\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string[])[1],\r\n      req,\r\n    );\r\n    const version = 'V1';\r\n    const extraParams: Record<string, unknown> =\r\n      (req.params as Record<string, unknown>[])[2] || {};\r\n    const msgParams: MessageParams = {\r\n      ...extraParams,\r\n      from: address,\r\n      data: message,\r\n    };\r\n\r\n    res.result = await processTypedMessage(msgParams, req, version);\r\n  }\r\n\r\n  async function signTypedDataV3(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processTypedMessageV3) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string[])[0],\r\n      req,\r\n    );\r\n    const message: string = (req.params as string[])[1];\r\n    const version = 'V3';\r\n    const msgParams: TypedMessageParams = {\r\n      data: message,\r\n      from: address,\r\n      version,\r\n    };\r\n\r\n    res.result = await processTypedMessageV3(msgParams, req, version);\r\n  }\r\n\r\n  async function signTypedDataV4(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processTypedMessageV4) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string[])[0],\r\n      req,\r\n    );\r\n    const message: string = (req.params as string)[1];\r\n    const version = 'V4';\r\n    const msgParams: TypedMessageParams = {\r\n      data: message,\r\n      from: address,\r\n      version,\r\n    };\r\n\r\n    res.result = await processTypedMessageV4(msgParams, req, version);\r\n  }\r\n\r\n  async function personalSign(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processPersonalMessage) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    // process normally\r\n    const firstParam: string = (req.params as string[])[0];\r\n    const secondParam: string = (req.params as string[])[1];\r\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\r\n    const extraParams: Record<string, unknown> =\r\n      (req.params as Record<string, unknown>[])[2] || {};\r\n\r\n    // We initially incorrectly ordered these parameters.\r\n    // To gracefully respect users who adopted this API early,\r\n    // we are currently gracefully recovering from the wrong param order\r\n    // when it is clearly identifiable.\r\n    //\r\n    // That means when the first param is definitely an address,\r\n    // and the second param is definitely not, but is hex.\r\n    let address: string, message: string;\r\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\r\n      let warning = `The eth_personalSign method requires params ordered `;\r\n      warning += `[message, address]. This was previously handled incorrectly, `;\r\n      warning += `and has been corrected automatically. `;\r\n      warning += `Please switch this param order for smooth behavior in the future.`;\r\n      (res as any).warning = warning;\r\n\r\n      address = firstParam;\r\n      message = secondParam;\r\n    } else {\r\n      message = firstParam;\r\n      address = secondParam;\r\n    }\r\n    address = await validateAndNormalizeKeyholder(address, req);\r\n\r\n    const msgParams: MessageParams = {\r\n      ...extraParams,\r\n      from: address,\r\n      data: message,\r\n    };\r\n\r\n    // eslint-disable-next-line require-atomic-updates\r\n    res.result = await processPersonalMessage(msgParams, req);\r\n  }\r\n\r\n  async function personalRecover(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    const message: string = (req.params as string)[0];\r\n    const signature: string = (req.params as string)[1];\r\n    const extraParams: Record<string, unknown> =\r\n      (req.params as Record<string, unknown>[])[2] || {};\r\n    const msgParams: sigUtil.SignedMessageData<unknown> = {\r\n      ...extraParams,\r\n      sig: signature,\r\n      data: message,\r\n    };\r\n    const signerAddress: string = sigUtil.recoverPersonalSignature(msgParams);\r\n\r\n    res.result = signerAddress;\r\n  }\r\n\r\n  async function encryptionPublicKey(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processEncryptionPublicKey) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string)[0],\r\n      req,\r\n    );\r\n\r\n    res.result = await processEncryptionPublicKey(address, req);\r\n  }\r\n\r\n  async function decryptMessage(\r\n    req: JsonRpcRequest<unknown>,\r\n    res: PendingJsonRpcResponse<unknown>,\r\n  ): Promise<void> {\r\n    if (!processDecryptMessage) {\r\n      throw ethErrors.rpc.methodNotSupported();\r\n    }\r\n\r\n    const ciphertext: string = (req.params as string)[0];\r\n    const address: string = await validateAndNormalizeKeyholder(\r\n      (req.params as string)[1],\r\n      req,\r\n    );\r\n    const extraParams: Record<string, unknown> =\r\n      (req.params as Record<string, unknown>[])[2] || {};\r\n    const msgParams: MessageParams = {\r\n      ...extraParams,\r\n      from: address,\r\n      data: ciphertext,\r\n    };\r\n\r\n    res.result = await processDecryptMessage(msgParams, req);\r\n  }\r\n\r\n  //\r\n  // utility\r\n  //\r\n\r\n  /**\r\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\r\n   * copy of it.\r\n   *\r\n   * @param {string} address - The address to validate and normalize.\r\n   * @param {Object} req - The request object.\r\n   * @returns {string} - The normalized address, if valid. Otherwise, throws\r\n   * an error\r\n   */\r\n  async function validateAndNormalizeKeyholder(\r\n    address: string,\r\n    req: JsonRpcRequest<unknown>,\r\n  ): Promise<string> {\r\n    if (typeof address === 'string' && address.length > 0) {\r\n      // ensure address is included in provided accounts\r\n      const accounts: string[] = await getAccounts(req);\r\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\r\n      const normalizedAddress: string = address.toLowerCase();\r\n\r\n      if (normalizedAccounts.includes(normalizedAddress)) {\r\n        return normalizedAddress;\r\n      }\r\n    }\r\n    throw ethErrors.rpc.invalidParams({\r\n      message: `Invalid parameters: must provide an Ethereum address.`,\r\n    });\r\n  }\r\n}\r\n\r\nfunction resemblesAddress(str: string): boolean {\r\n  // hex prefix 2 + 20 bytes\r\n  return str.length === (2 + (20 * 2));\r\n}\r\n"]}