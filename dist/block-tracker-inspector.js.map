{"version":3,"file":"block-tracker-inspector.js","sourceRoot":"","sources":["../src/block-tracker-inspector.ts"],"names":[],"mappings":";;;AACA,qDAA2E;AAI3E,MAAM,sBAAsB,GAAa;IACvC,0BAA0B;IAC1B,2BAA2B;CAC5B,CAAC;AAMF,wEAAwE;AACxE,SAAgB,qCAAqC,CAAC,EACpD,YAAY,GAC2B;IACvC,OAAO,uCAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;;QACpD,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAChD,OAAO,IAAI,EAAE,CAAC;SACf;QACD,gDAAgD;QAChD,MAAM,IAAI,EAAE,CAAC;QACb,wCAAwC;QACxC,IAAI,QAAC,GAAG,CAAC,MAAM,0CAAE,WAAW,CAAA,EAAE;YAC5B,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,OAAO,GAAG,CAAC,MAAM,CAAC,WAAW,KAAK,QAAQ,EAAE;YAC9C,mEAAmE;YACnE,MAAM,WAAW,GAAW,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;YACxE,4FAA4F;YAC5F,MAAM,kBAAkB,GAAW,MAAM,CAAC,QAAQ,CAChD,YAAY,CAAC,eAAe,EAAS,EACrC,EAAE,CACH,CAAC;YACF,IAAI,WAAW,GAAG,kBAAkB,EAAE;gBACpC,MAAM,YAAY,CAAC,mBAAmB,EAAE,CAAC;aAC1C;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC,CAAC;AACL,CAAC;AA3BD,sFA2BC","sourcesContent":["import { PollingBlockTracker } from 'eth-block-tracker';\r\nimport { createAsyncMiddleware, JsonRpcMiddleware } from 'json-rpc-engine';\r\n\r\nimport { Block } from './utils/cache';\r\n\r\nconst futureBlockRefRequests: string[] = [\r\n  'eth_getTransactionByHash',\r\n  'eth_getTransactionReceipt',\r\n];\r\n\r\ninterface BlockTrackerInspectorMiddlewareOptions {\r\n  blockTracker: PollingBlockTracker;\r\n}\r\n\r\n// inspect if response contains a block ref higher than our latest block\r\nexport function createBlockTrackerInspectorMiddleware({\r\n  blockTracker,\r\n}: BlockTrackerInspectorMiddlewareOptions): JsonRpcMiddleware<string[], Block> {\r\n  return createAsyncMiddleware(async (req, res, next) => {\r\n    if (!futureBlockRefRequests.includes(req.method)) {\r\n      return next();\r\n    }\r\n    // eslint-disable-next-line node/callback-return\r\n    await next();\r\n    // abort if no result or no block number\r\n    if (!res.result?.blockNumber) {\r\n      return undefined;\r\n    }\r\n    if (typeof res.result.blockNumber === 'string') {\r\n      // if number is higher, suggest block-tracker check for a new block\r\n      const blockNumber: number = Number.parseInt(res.result.blockNumber, 16);\r\n      // Typecast: If getCurrentBlock returns null, currentBlockNumber will be NaN, which is fine.\r\n      const currentBlockNumber: number = Number.parseInt(\r\n        blockTracker.getCurrentBlock() as any,\r\n        16,\r\n      );\r\n      if (blockNumber > currentBlockNumber) {\r\n        await blockTracker.checkForLatestBlock();\r\n      }\r\n    }\r\n    return undefined;\r\n  });\r\n}\r\n"]}