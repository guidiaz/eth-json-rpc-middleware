{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../src/utils/cache.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcRequest, PendingJsonRpcResponse } from 'json-rpc-engine';\r\nimport stringify from 'json-stable-stringify';\r\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\r\n\r\nexport type Payload = Partial<JsonRpcRequest<string[]>>;\r\n\r\nexport interface JsonRpcRequestToCache extends JsonRpcRequest<string[]> {\r\n  skipCache: boolean;\r\n}\r\n\r\nexport type BlockData = string | string[];\r\n\r\nexport type Block = Record<string, BlockData>;\r\n\r\nexport type BlockCache = Record<string, Block>;\r\n\r\nexport type Cache = Record<number, BlockCache>;\r\n\r\nexport type SendAsyncCallBack = (\r\n  err: Error,\r\n  providerRes: PendingJsonRpcResponse<Block>\r\n) => void;\r\n\r\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\r\n  sendAsync: (\r\n    req: JsonRpcRequest<string[]>,\r\n    callback: SendAsyncCallBack\r\n  ) => void;\r\n  send: (req: JsonRpcRequest<string[]>, callback: () => void) => void;\r\n}\r\n\r\nexport function cacheIdentifierForPayload(\r\n  payload: Payload,\r\n  skipBlockRef?: boolean,\r\n): string | null {\r\n  const simpleParams: string[] = skipBlockRef\r\n    ? paramsWithoutBlockTag(payload)\r\n    : payload.params ?? [];\r\n  if (canCache(payload)) {\r\n    return `${payload.method}:${stringify(simpleParams)}`;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function canCache(payload: Payload): boolean {\r\n  return cacheTypeForPayload(payload) !== 'never';\r\n}\r\n\r\nexport function blockTagForPayload(payload: Payload): string | undefined {\r\n  if (!payload.params) {\r\n    return undefined;\r\n  }\r\n  const index: number | undefined = blockTagParamIndex(payload);\r\n\r\n  // Block tag param not passed.\r\n  if (index === undefined || index >= payload.params.length) {\r\n    return undefined;\r\n  }\r\n\r\n  return payload.params[index];\r\n}\r\n\r\nexport function paramsWithoutBlockTag(payload: Payload): string[] {\r\n  if (!payload.params) {\r\n    return [];\r\n  }\r\n  const index: number | undefined = blockTagParamIndex(payload);\r\n\r\n  // Block tag param not passed.\r\n  if (index === undefined || index >= payload.params.length) {\r\n    return payload.params;\r\n  }\r\n\r\n  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\r\n  if (payload.method === 'eth_getBlockByNumber') {\r\n    return payload.params.slice(1);\r\n  }\r\n  return payload.params.slice(0, index);\r\n}\r\n\r\nexport function blockTagParamIndex(payload: Payload): number | undefined {\r\n  switch (payload.method) {\r\n    // blockTag is at index 2\r\n    case 'eth_getStorageAt':\r\n      return 2;\r\n    // blockTag is at index 1\r\n    case 'eth_getBalance':\r\n    case 'eth_getCode':\r\n    case 'eth_getTransactionCount':\r\n    case 'eth_call':\r\n      return 1;\r\n    // blockTag is at index 0\r\n    case 'eth_getBlockByNumber':\r\n      return 0;\r\n    // there is no blockTag\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\nexport function cacheTypeForPayload(payload: Payload): string {\r\n  switch (payload.method) {\r\n    // cache permanently\r\n    case 'web3_clientVersion':\r\n    case 'web3_sha3':\r\n    case 'eth_protocolVersion':\r\n    case 'eth_getBlockTransactionCountByHash':\r\n    case 'eth_getUncleCountByBlockHash':\r\n    case 'eth_getCode':\r\n    case 'eth_getBlockByHash':\r\n    case 'eth_getTransactionByHash':\r\n    case 'eth_getTransactionByBlockHashAndIndex':\r\n    case 'eth_getTransactionReceipt':\r\n    case 'eth_getUncleByBlockHashAndIndex':\r\n    case 'eth_getCompilers':\r\n    case 'eth_compileLLL':\r\n    case 'eth_compileSolidity':\r\n    case 'eth_compileSerpent':\r\n    case 'shh_version':\r\n    case 'test_permaCache':\r\n      return 'perma';\r\n\r\n    // cache until fork\r\n    case 'eth_getBlockByNumber':\r\n    case 'eth_getBlockTransactionCountByNumber':\r\n    case 'eth_getUncleCountByBlockNumber':\r\n    case 'eth_getTransactionByBlockNumberAndIndex':\r\n    case 'eth_getUncleByBlockNumberAndIndex':\r\n    case 'test_forkCache':\r\n      return 'fork';\r\n\r\n    // cache for block\r\n    case 'eth_gasPrice':\r\n    case 'eth_blockNumber':\r\n    case 'eth_getBalance':\r\n    case 'eth_getStorageAt':\r\n    case 'eth_getTransactionCount':\r\n    case 'eth_call':\r\n    case 'eth_estimateGas':\r\n    case 'eth_getFilterLogs':\r\n    case 'eth_getLogs':\r\n    case 'test_blockCache':\r\n      return 'block';\r\n\r\n    // never cache\r\n    default:\r\n      return 'never';\r\n  }\r\n}\r\n"]}