{"version":3,"file":"providerAsMiddleware.js","sourceRoot":"","sources":["../src/providerAsMiddleware.ts"],"names":[],"mappings":";;;AAGA,SAAgB,oBAAoB,CAClC,QAAkC;IAElC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QAC9B,2BAA2B;QAC3B,QAAQ,CAAC,SAAS,CAChB,GAAG,EACH,CAAC,GAAU,EAAE,WAA0C,EAAE,EAAE;YACzD,oBAAoB;YACpB,IAAI,GAAG,EAAE;gBACP,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACjB;YACD,gDAAgD;YAChD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAChC,OAAO,GAAG,EAAE,CAAC;QACf,CAAC,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAlBD,oDAkBC","sourcesContent":["import { JsonRpcMiddleware, PendingJsonRpcResponse } from 'json-rpc-engine';\r\nimport { Block, SafeEventEmitterProvider } from './utils/cache';\r\n\r\nexport function providerAsMiddleware(\r\n  provider: SafeEventEmitterProvider,\r\n): JsonRpcMiddleware<string[], Block> {\r\n  return (req, res, _next, end) => {\r\n    // send request to provider\r\n    provider.sendAsync(\r\n      req,\r\n      (err: Error, providerRes: PendingJsonRpcResponse<Block>) => {\r\n        // forward any error\r\n        if (err) {\r\n          return end(err);\r\n        }\r\n        // copy provider response onto original response\r\n        Object.assign(res, providerRes);\r\n        return end();\r\n      },\r\n    );\r\n  };\r\n}\r\n"]}