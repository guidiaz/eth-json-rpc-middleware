{"version":3,"file":"providerFromEngine.js","sourceRoot":"","sources":["../src/providerFromEngine.ts"],"names":[],"mappings":";;;;;;AACA,sFAA4D;AAG5D,SAAgB,kBAAkB,CAChC,MAAqB;IAErB,MAAM,QAAQ,GAA6B,IAAI,4BAAgB,EAA8B,CAAC;IAC9F,+BAA+B;IAC/B,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChD,QAAQ,CAAC,IAAI,GAAG,CAAC,GAA6B,EAAE,QAAoB,EAAE,EAAE;QACtE,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC/B,CAAC,CAAC;IACF,wBAAwB;IACxB,IAAI,MAAM,CAAC,EAAE,EAAE;QACb,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,OAAe,EAAE,EAAE;YAC5C,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAnBD,gDAmBC","sourcesContent":["import { JsonRpcEngine, JsonRpcRequest } from 'json-rpc-engine';\r\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\r\nimport { SafeEventEmitterProvider } from './utils/cache';\r\n\r\nexport function providerFromEngine(\r\n  engine: JsonRpcEngine,\r\n): SafeEventEmitterProvider {\r\n  const provider: SafeEventEmitterProvider = new SafeEventEmitter() as SafeEventEmitterProvider;\r\n  // handle both rpc send methods\r\n  provider.sendAsync = engine.handle.bind(engine);\r\n  provider.send = (req: JsonRpcRequest<string[]>, callback: () => void) => {\r\n    if (typeof callback !== 'function') {\r\n      throw new Error('Must provide callback to \"send\" method.');\r\n    }\r\n    engine.handle(req, callback);\r\n  };\r\n  // forward notifications\r\n  if (engine.on) {\r\n    engine.on('notification', (message: string) => {\r\n      provider.emit('data', null, message);\r\n    });\r\n  }\r\n  return provider;\r\n}\r\n"]}