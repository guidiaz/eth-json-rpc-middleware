{"version":3,"file":"block-ref.js","sourceRoot":"","sources":["../src/block-ref.ts"],"names":[],"mappings":";;;;;;AACA,qDAIyB;AACzB,kDAA0B;AAC1B,gDAAwB;AACxB,yCAIuB;AAOvB,SAAgB,wBAAwB,CAAC,EACvC,QAAQ,EACR,YAAY,MACiB,EAAE;IAC/B,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,KAAK,CAAC,8DAA8D,CAAC,CAAC;KAC7E;IACD,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,KAAK,CACT,kEAAkE,CACnE,CAAC;KACH;IAED,OAAO,uCAAqB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;;QACpD,MAAM,aAAa,GAAuB,0BAAkB,CAAC,GAAG,CAAC,CAAC;QAClE,2CAA2C;QAC3C,IAAI,aAAa,KAAK,SAAS,EAAE;YAC/B,OAAO,IAAI,EAAE,CAAC;SACf;QACD,uBAAuB;QACvB,IAAI,QAAQ,SAAuB,GAAG,CAAC,MAAM,0CAAG,aAAa,CAAC,CAAC;QAC/D,oCAAoC;QACpC,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,QAAQ,GAAG,QAAQ,CAAC;SACrB;QACD,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,OAAO,IAAI,EAAE,CAAC;SACf;QACD,sBAAsB;QACtB,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;QAC9D,+CAA+C;QAC/C,MAAM,YAAY,GAAG,eAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,iBAAiB,CAAC;SACxD;QACD,wBAAwB;QACxB,MAAM,QAAQ,GAAkC,MAAM,cAAI,CACvD,QAAqC,CAAC,SAAS,CACjD,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAC/B,6CAA6C;QAC7C,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC7B,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC3B,OAAO,IAAI,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AA5CD,4DA4CC","sourcesContent":["import { PollingBlockTracker } from 'eth-block-tracker';\r\nimport {\r\n  createAsyncMiddleware,\r\n  JsonRpcMiddleware,\r\n  PendingJsonRpcResponse,\r\n} from 'json-rpc-engine';\r\nimport clone from 'clone';\r\nimport pify from 'pify';\r\nimport {\r\n  Block,\r\n  SafeEventEmitterProvider,\r\n  blockTagParamIndex,\r\n} from './utils/cache';\r\n\r\ninterface BlockRefMiddlewareOptions {\r\n  blockTracker?: PollingBlockTracker;\r\n  provider?: SafeEventEmitterProvider;\r\n}\r\n\r\nexport function createBlockRefMiddleware({\r\n  provider,\r\n  blockTracker,\r\n}: BlockRefMiddlewareOptions = {}): JsonRpcMiddleware<string[], Block> {\r\n  if (!provider) {\r\n    throw Error('BlockRefMiddleware - mandatory \"provider\" option is missing.');\r\n  }\r\n  if (!blockTracker) {\r\n    throw Error(\r\n      'BlockRefMiddleware - mandatory \"blockTracker\" option is missing.',\r\n    );\r\n  }\r\n\r\n  return createAsyncMiddleware(async (req, res, next) => {\r\n    const blockRefIndex: number | undefined = blockTagParamIndex(req);\r\n    // skip if method does not include blockRef\r\n    if (blockRefIndex === undefined) {\r\n      return next();\r\n    }\r\n    // skip if not \"latest\"\r\n    let blockRef: string | undefined = req.params?.[blockRefIndex];\r\n    // omitted blockRef implies \"latest\"\r\n    if (blockRef === undefined) {\r\n      blockRef = 'latest';\r\n    }\r\n    if (blockRef !== 'latest') {\r\n      return next();\r\n    }\r\n    // lookup latest block\r\n    const latestBlockNumber = await blockTracker.getLatestBlock();\r\n    // create child request with specific block-ref\r\n    const childRequest = clone(req);\r\n    if (childRequest.params) {\r\n      childRequest.params[blockRefIndex] = latestBlockNumber;\r\n    }\r\n    // perform child request\r\n    const childRes: PendingJsonRpcResponse<Block> = await pify(\r\n      (provider as SafeEventEmitterProvider).sendAsync,\r\n    ).call(provider, childRequest);\r\n    // copy child response onto original response\r\n    res.result = childRes.result;\r\n    res.error = childRes.error;\r\n    return next();\r\n  });\r\n}\r\n"]}